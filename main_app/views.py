from django.shortcuts import render, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
from django.core import serializers
from django.core.files.storage import FileSystemStorage
from .models import Song

import json
import re

import numpy as np
from . import ProcessSong

def index(request):
    return render(request, "index.html")


## TEMPLATE TO EXPOSE METHODS FOR REST API
## @csrf_exempt
## def methodName(request):
##     pass

@csrf_exempt
def createTimestamps(request):
    songsFolderPath = "songs/"
    # songList =
    if request.method == "GET":
        songs = Song.objects.all()
        data = {"songs": songs}
        return render(request, "timeStampMaker.html", data)
    elif request.method == "POST":
        isSongUpload = False
        isCreateTimestamp = False
        try:
            isSongUpload = request.POST["songUpload"]
            isCreateTimestamp = request.POST["createTimestamp"]
        except Exception as e:
            if e.args[0] == "songUpload":
                isSongUpload = "false"
                isCreateTimestamp = request.POST["createTimestamp"]
            if e.args[0] == "createTimestamp":
                isCreateTimestamp = "false"
                isSongUpload = request.POST["songUpload"]

        if isSongUpload == "true":
            files = request.FILES.getlist("userSongs")
            for file in files:
                # song = Song(name=file.name, path=file)
                # song.save()
                # default_storage.save(songsFolderPath+file.name, file)
                pass
        elif isCreateTimestamp == "true":
            songName = request.POST["songName"]
            timestamps = request.POST["timestamps"]
            timestamps = timestamps.split(",")
            timestamps = [float(t) for t in timestamps]
            songLength = request.POST["songLength"]
            song = Song(name=songName, songLength=songLength, timestamps=np.array(timestamps))
            song.save()
            pass
        return JsonResponse({"Success": True}, status=200)

@csrf_exempt
def getSongs(request):
    if request.method == "GET":
        getDelta = "0"
        if "getDelta" in request.headers:
            getDelta = request.headers["getDelta"]
        songs = Song.objects.all()
        data = serializers.serialize("json", songs, fields=("name", "songLength", "timestamps"))
        data1 = []
        jsonData = json.loads(data)
        for data in jsonData:
            if getDelta == "1":
                data["fields"]["timestamps"] = data["fields"]["timestamps"][1:-1]
                timestamps = data["fields"]["timestamps"]
                timestamps = [float(i) for i in timestamps.split()]
                timestamps = np.diff(timestamps)
                data["fields"]["timestamps"] = str(timestamps)

            data1.append(data["fields"])

        responseObj = {"Songs": data1}
        return JsonResponse(responseObj, status=200)
    return HttpResponse(status=400)

@csrf_exempt
def createAutomatedTimestamps(request):
    timestamps = []
    if request.method == "POST":
        file = request.FILES["song"]
        mode = request.POST["mode"]
        save = request.POST["save"]
        try:
            getDelta = request.POST["getDelta"]
        except Exception as e:
            if e.args[0] == "getDelta":
                getDelta = "0"

        fs = FileSystemStorage()
        filename = fs.save(file.name, file)
        timestamps, song_duration = ProcessSong.getTimestamps("media/"+filename, mode)

        if fs.exists(filename):
            fs.delete(filename)
            pass
        if mode == "1":
            responseObj = {"tempo": timestamps, "SongDuration": song_duration}
        else:
            # tmpTimestamps = re.sub(r'\s+', ' ', "["+str(timestamps)[1:].strip().replace("\n", "")).strip()
            if save == "1":
                song = Song(name=file.name, songLength=song_duration,
                            timestamps=timestamps)
                song.save()
            if getDelta == "1":
                timestamps = np.diff(timestamps)
            responseObj = {"timestamps": str(timestamps), "SongDuration": song_duration}

        return JsonResponse(responseObj, status=200)
    return HttpResponse(status=400)

# @csrf_exempt
# def colorToGray(request):
#     ## A base64 string for an example color image
#     # img_b64 = ""
#     if request.method == "POST":
#         img_b64 = json.loads(request.body)["image_b64"]
#         if img_b64 != None or img_b64 != "":
#             if(img_b64 != "" or img_b64 != None):
#                 img = ProcessImage.colorToGray(img_b64)
#                 if len(img) != None:
#                     return HttpResponse(img)
#                     # return JsonResponse({"result_image": img})
#                 else:
#                     return HttpResponse(status=400)
#             else:
#                 return HttpResponse(status=400)
#     return HttpResponse(status=400)

